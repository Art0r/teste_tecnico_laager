services:

  balancer:
    image: nginx:1.29.0-alpine
    hostname: balancer
    container_name: balancer
    depends_on:
      application-backend:
        condition: service_healthy
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "9999:9999"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9999/health"]
      interval: 120s
      timeout: 3s
      retries: 3
      start_period: 20s
    networks:
      - application-internal

  queue:
    image: redis:8.2.2-bookworm
    hostname: queue
    container_name: queue
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 120s
      timeout: 3s
      retries: 3
      start_period: 20s
    networks:
      - application-internal
    volumes:
      - redis_data:/data

  application-frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    env_file: .env
    hostname: application-frontend
    networks:
      - application-internal
    depends_on:
      application-backend:
        condition: service_healthy
    deploy:
      replicas: 4

  application-backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    hostname: application-backend
    env_file: .env
    networks:
      - application-internal
    depends_on:
      database:
        condition: service_healthy
      queue:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/up"]
      interval: 120s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      replicas: 5

  sidekiq:
    build:
      context: .
      dockerfile: Dockerfile.backend
    depends_on:
      database:
        condition: service_healthy
      queue:
        condition: service_healthy
    env_file: .env
    networks:
      - application-internal
    command: bundle exec sidekiq
    deploy:
      replicas: 5

  database:
    image: postgres:17-alpine
    hostname: database
    container_name: database
    env_file: .env
    networks:
      - application-internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 120s
      timeout: 60s
      retries: 5
      start_period: 80s
    volumes:
      - postgres_data:/var/lib/postgresql/data

networks:
  application-internal:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
